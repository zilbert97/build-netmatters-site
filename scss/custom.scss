@import "partials/variables",
        "partials/keyframes",
        "partials/burger-sauce",
        "partials/globals";

//=====================================
// HEADER & JUMBOTRON LAYOUT
//=====================================
// To make the header and banner span
// the entire viewport i've placed them
// in a CSS Grid: the header takes up a
// defined amount with the jumbo taking
// up all extra space available in the
// grid's 100vh height.

.full-viewport {
  display            : grid;
  grid-template-rows : max-content auto;
  height             : 100vh;

  .btn-primary {
    background-color : map-get($nm-services, 'it-support');
  }
}

//=====================================
// HEADER
//=====================================
// The header is a flex container. The order of flex item (containers of similar
// elements) at each breakpoint are as follows:
//
//         SMALL:  MEDIUM:  LARGE:  X-LARGE:
// Logo     0
// Buttons  10      (hide)   10
// Burger   30
// Search   50      20


.main-header {
  display         : flex;
  position        : relative;   // Set so that checkbox toggle is positioned relative to .main-header
  flex-flow       : row wrap;
  align-items     : center;
  padding         : 20px 15px;
  min-height      : 168px;
}

#logo-container {
  flex           : 1 1 0;
  margin-right   : 20px;
  padding-bottom : 5px;
  a > .logo {
    max-width : 100%;
    min-width : 0;
  }
}

#toggle {display: none;}

#buttons-container {
  // Be a flex container (as well as flex item):
  order           : 10;                // Place after logo, before burger
  display         : flex;
  flex-flow       : row nowrap;
  align-items     : center;
  justify-content : flex-end;

  #support-button {display: none;}
  #contact-button {display: none;}

  #voip-icon {
    width      : 70px;
    height     : auto;
    text-align : center;
    position   : relative;

    hr {display: none;}

    @include combined-ui {
      hr {
        display       : block;
        position      : absolute;
        top           : 60%;
        left          : 25%;
        width         : 35px;
        border-color  : $dark-1;
        border-width  : 3px;
        margin-bottom : 12px;
      }
    }

    .glyph {
      color     : $dark-1;
      font-size : 2rem;  // 32px
    }
  }
}

#search-container {
  margin-top : auto;
  flex-basis : 100%;    // Grow the search-container to full width, to wrap below
  order      : 50;      // Place after hamburger-container (last item)
  position   : relative;

  #search-input {
    height      : 48px;
    width       : 100%;
    padding     : 5px 40px 5px 15px;

    font-size   : .875rem;             // 14px
    line-height : 1.4;
    color       : $search-input;

    background-color : $search-background;
    border           : 2px solid $search-border;
    border-radius    : 2px;
    box-shadow       : $search-shadow;

    &:focus {                          // At S breakpoint remove inner shadow
      box-shadow     : none;           // when focused
      outline        : 0;
    }
  }

  #search-icon {
    position : absolute;
    z-index  : 100;
    right    : 12px;
    top      : 10px;

    color      : $dark-1;
    font-style : 400;
    font-size  : 1.25rem;  // 20px
  }

  #search-button {display: none;}                                          // Only append to search field at wider breakpoints

}

#hamburger-container {
  order: 30;                                                // Place after buttons-container, before search-container
  margin-left: 20px;
  // NTD: Change hover state of hamburger _burger-sauce (not ease)
}

@media (min-width: map-get($breakpoints, 'm')) {
  .main-header {
    flex-wrap  : nowrap;
    margin     : auto;
    min-height : 110px;
  }

  #logo-container {
    flex       : 0 0 auto;
    box-sizing : content-box;
    width      : 345px;
    padding    : 0 15px;
  }

  #voip-icon {display: none;}

  #search-container {
    order  : 20;                                            // Place after buttons-container, before hamburger-container
    flex   : 0 0 auto;
    margin : 0 0 0 20px;

    #search-input {
      height           : $header-button-height;
      width            : 174px;  // Make set width
      background-color : $light-1;
      border-width     : 1px;
      border-radius    : 0;

      &:focus {                        // At M breakpoint and above apply a
        outline        : 0;            // blue-cyan effect
        border-color   : $field-focus-color;
        box-shadow     : $field-focus-shadow-in,
                         $field-focus-shadow-out;
      }
    }

    #search-icon {display: none;}

    #search-button {
      @include button-base-style($service: 'utility', $context: 'header') {
        width         : 63px;
        margin-left   : -5px;                               // This ensures input and button are flush
        padding-left  : 20px;
        padding-right : 20px;
        border-radius : 0 $border-radius $border-radius 0;  // Keep button style continuous with edge of search field
        font-size     : 1.4375rem;  // 23px
      }
    }
  }
}

@media (min-width: map-get($breakpoints, 'l')) {

  #logo-container {
    padding: 0;
    margin-right: 75px;
  }

  #buttons-container {
    #support-button {
      @include button-base-style($service: 'it-support', $context: 'header');
    }
    #contact-button {
      @include button-base-style($service: 'utility', $context: 'header');
    }
  }

  #search-container {
    #search-input {
      visibility    : hidden; // Initially set to hidden for animation when button pressed
      width         : 300px;
      position      : absolute;
      right         : 63px;    // Offset by width of the search button
      border-radius : $border-radius 0 0 $border-radius;
    }
    #search-button {
      transition    : border-radius .2s ease-out;
      border-radius : $border-radius;
      margin-left   : 0;  // Remove -5px margin
    }
  }

  // In order to target the buttons-container using a sibling selector I have
  // reversed the source order. I have then reversed this using flexbox `order`
  // and set `visibility: hidden;` to retain layout in place.

  // Checkbox hack - a hidden overlay checkbox which toggles the state of other
  // elements.

  #toggle {
    display  : block;
    position : absolute;  // Positioned relative to .main-header wrapper
    right    : 98px;
    z-index  : 100;

    width    : 63px;
    height   : 60px;
    opacity  : 0;   // Hide from view
    cursor   : pointer;

    &:hover ~ #search-container > #search-button {
      background-color: $utility-button-ui;
    }
  }

  // NTD:
  // - When switching breakpoints animation occurs - ideally animation only upon UI.
  // - Uncheck toggle when click away (I think this is only possible by using JavaScript/JQuery)

  #toggle:checked ~ #search-container {
    #search-button {
      transition    : border-radius .2s ease-out .2s;     // Open up rounded corners for flush fit
      border-radius : 0 $border-radius $border-radius 0;  // with the search input field
    }
    #search-input {
      @include fade-element-in;
    }
    & ~ #buttons-container {
      @include fade-element-out;
    }
  }

  #toggle:not(:checked) ~ #search-container {
    #search-input {
      @include fade-element-out;
    }
    & ~ #buttons-container {
      @include fade-element-in;
    }
  }
}

@media (min-width: map-get($breakpoints, 'xl')) {
  #toggle {display: none;}

  #search-container {
    #search-button {
      border-radius : 0 $border-radius $border-radius 0;     // For flush flow with search box
      margin-left   : -5px;
    }
    #search-input {
      visibility : visible !important;
      width      : 240px;
      position   : static;
    }
  }

  #buttons-container {
    visibility   : visible !important;
  }
}

//=====================================
// JUMBOTRON
//=====================================
// Jumbotron = flex container for its content so contents are easily centered
// Also a grid item

.jumbotron {
  display         : flex;
  align-items     : center;
  justify-content : center;
  margin          : 0;

  background      : linear-gradient(to right, #000, rgba(0,0,0,.3)),
                    $dark-1 url('../img/carousel-img.jpg') no-repeat center;
  background-size : cover;

  text-align      : center;
  @media (min-width: map-get($breakpoints, 'l')) {
    text-align    : left;
  }
  * {
    color         : $light-1;
  }
  h1 {
    text-transform : uppercase;
    margin-bottom  : 25px;
  }
  .lead {
    line-height   : 2.25rem;
    font-weight   : 400;
    margin-bottom : 35px;
  }

  .jumbotron-button {
    @include button-base-style($service: 'web-design', $context: 'jumbo') {
      // ADD THESE TO _GLOBALS MIXIN?
      height      : auto;
      line-height : 50px;
    }
  }
}


// div within jumbo
// small: center, margin auto, 15px side padding
// Large: fixed width



//=====================================
// NETMATTERS SERVICE CARDS
//=====================================
// Styling for each card that describes
// a specific NetMatters service

@mixin nm-card($service, $color) {
  margin      : 30px 15px 0;
  min-width   : 95%;                   // Ensure cards are equal width despite
                                       // different content at S breakpoint

  @media (min-width: map-get($breakpoints, 'm')) {
    min-width : 0;
    width     : 720px;                 // Fixed width at M breakpoint
  }

  flex-shrink : 1;                     // Prevents cards from overflowing the
                                       // flex container

  // NTD: Surely there must be a func to eval if val in range

  // At L and XL breakpoints set fixed widths for cards 1-3 and 4-7
  $i: index(($nm-services), ($service $color));
  @media (min-width: map-get($breakpoints, 'l')) {
    @if $i==1 or $i==2 or $i==3 {
      flex-basis : 293px;
    }
    @else {
      flex-basis : 455px;
    }
  }

  @media (min-width: map-get($breakpoints, 'xl')) {
    @if $i==1 or $i==2 or $i==3 {
      flex-basis : 370px;
    }
    @else {
      flex-basis : 270px;
    }
  }

  // Other card styling
  background-color     : $light-1;
  color                : $dark-1;
  font-size            : .8125rem;     // 13px
  line-height          : 1.5;
  letter-spacing       : .03125rem;    // .5px

  .card-body {
    padding            : 30px;
  }

  .card-body > hr {
    width              : 30px;
    margin-bottom      : 12px;
    border-color       : $dark-1;
    border-width       : 3px;
  }

  .card-body > p {
    height             : auto;
    margin-bottom      : 13px;
  }

  .card-body > .read-more {
    display            : inline-block;
    width              : 130px;
    padding            : 10px;
    border-radius      : $border-radius;
    border-color       : $color;
    background-color   : $color;
    color              : $light-1;
    font-size          : 1.0625rem;    // 17px
    font-style         : normal;
    text-transform     : uppercase;
  }

  .card-body > .glyph {
    width              : 60px;
    height             : 60px;
    margin-bottom      : 1.0625rem;    // 17px
    color              : $light-1;
    font-size          : 1.5rem;       // 24px
    line-height        : 60px;
    border-radius      : 50%;
    border-color       : $color;
    background-color   : $color;
  }

  &:hover {
    background-color   : $color;
    color              : $light-1;
    .card-body > hr {
      border-color     : $light-1;
    }
    .card-body > i {                   // Style both glyph and 'read more' icon
      background-color : $light-1;
      border-color     : $light-1;
      color            : $color;
    }
  }
}

.nm-cards {
  // Styles for the nm-cards container
  display              : flex;
  flex-flow            : column wrap;
  align-items          : center;

  @media (min-width: map-get($breakpoints, 'l')) {
    flex-flow          : row wrap;
    justify-content    : center;
    align-items        : stretch;
    align-content      : stretch;
  }

  padding              : 20px 0 50px;
  background-color     : $light-2;

  // Target each child element (card) and apply identical and unique styles
  @each $service, $color in $nm-services {
    &-#{$service} {
      @include nm-card($service, $color);
    }
  }

  &-break {                            // At L/XL breakpoints force line break
    display      : hidden;             // after Digital Marketing card
    @media (min-width: map-get($breakpoints, 'l')) {
      display    : inline-block;
      flex-basis : 100%;
    }
  }
}
